// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique
  senha String
  nome  String

  emailVerificado Boolean @default(false)

  tipo      UserType
  estudante Estudante?
  professor Professor?
  empresa   Empresa?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Estudante {
  id         String  @id @default(uuid())
  userId     String  @unique
  telefone   String?
  fotoPerfil String?

  dataNascimento DateTime
  genero         String

  faculdade     String?
  matricula     String
  curso         String
  semestre      Int
  periodo       Periodo
  dataFormatura DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  candidaturas Candidatura[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("estudantes")
}

model Professor {
  id         String  @id @default(uuid())
  userId     String  @unique
  telefone   String?
  fotoPerfil String?

  dataNascimento DateTime
  genero         String

  areasInteresse String[]

  areaAtuacao  String
  departamento String
  titulacao    String
  lattes       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  vagas Vaga[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("professores")
}

model Empresa {
  id           String  @id @default(uuid())
  userId       String  @unique
  nomeFantasia String  @unique
  logo         String?

  cnpj      String  @unique
  ramo      String
  setor     String
  descricao String?

  endereco String?
  telefone String?

  emailContato String? // Por padrão, é o mesmo da conta
  website      String?
  redesSociais String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  vagas Vaga[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("empresas")
}

model Vaga {
  id String @id @default(uuid())
  empresaId String?
  professorId String?

  titulo       String
  descricao    String
  tipo         TipoVaga
  requisitos   String[]

  prazoInscricao DateTime
  status         StatusVaga @default(ATIVA)
  cursosAlvo String?
  semestreMinimo Int?

  empresa  Empresa?  @relation(fields: [empresaId], references: [id], onDelete: SetNull)
  professor Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)

  candidaturas Candidatura[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Candidatura {
  id String @id @default(uuid())

  vagaId String
  estudanteId String

  dataCandidatura DateTime @default(now())
  status StatusCandidatura @default(PENDENTE)
  
  vaga Vaga @relation(fields: [vagaId], references: [id], onDelete: Cascade)
  estudante Estudante @relation(fields: [estudanteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusCandidatura {
  PENDENTE
  ACEITA
  RECUSADA
}

enum TipoVaga {
  ESTAGIO
  PESQUISA
  EXTENSAO
}

enum StatusVaga {
  ATIVA
  INATIVA
  ENCERRADA
}

enum UserType {
  ESTUDANTE
  PROFESSOR
  EMPRESA
}

enum Periodo {
  MATUTINO
  VESPERTINO
  NOTURNO
}
